cmdhistory=["(simple-search (list 1 2 3 4 5 6 7 8 9 10) 11)" "(simple-search (list 1 2 3 4 5 6 7 8 9 10) 1)" "(simple-search (list 1 2 3 4 5 6 7 8 9 10) 11)" "(simple-search (list 1 2 3 4 5 6 7 8 9 10) 1\\n               )" "(simple-search (list 1 2 3 4 5 6 7 8 9 10) 11)" "(binary-search (list 1 2 3 4 5) 1)" "(simple-search (list 1 2 3 4 5 6 7 8 9 10) 11)" "(simple-search (list 1 2 3 4 5 6 7 8 9 10) 1\\n               )" "(simple-search (list 1 2 3 4 5 6 7 8 9 10) 11\\n               )" "(simple-search (list 1 2 3 4 5 6 7 8 9 10) 7\\n               )" "(binary-search list(1 2 3 4 5) 3)" "(binary-search (list 1 2 3 4 5) 3)" "(binary-search (list 1 2 3 4 5) 2)" "(binary-search (list 1 2 3 4 5) 4)" "(binary-search (list 1 2 3 4 5) 5)" "(binary-search (list 1 2 3 4 5) 4)" "(binary-search (list 1 2 3 4 5) 3)" "(binary-search (list 1 2 3 4 5) 2)" "(binary-search (list 1 2 3 4 5) 1)" "(binary-search (list 1 2 3 4 5) 2)" "(binary-search (list 1 2 3 4 5) 1\\n               )" "(binary-search (list 1 2 3 4 5) 3\\n               )" "(binary-search (list 1 2 3 4 5) 4)" "(binary-search (list 1 2 3 4 5) 5\\n               )" "(binary-search (list 1 2 3 4 5) 1)" "(binary-search (list 1 2 3 4 5) 5)" "(binary-search (list 1 2 3 4 5) 4)" "(binary-search (list 1 2 3 4 5) 3)" "(binary-search (list 1 2 3 4 5) 2)" "(binary-search (list 1 2 3 4 5) 5)" "(binary-search (list 1 2 3 4 5) 4)" "(binary-search (list 1 2 3 4 5) 3)" "(binary-search (list 1 2 3 4 5) 2)" "(binary-search (list 1 2 3 4 5) 1)" "(binary-search (list 1 2 3 4 5) 0)" "(binary-search (list 1 2 3 4 5) 3)" "(binary-search (list 1 2 3 4 5) 4)" "(binary-search (list 1 2 3 4 5) 5)" "(binary-search (list 1 2 3 4 5) 6)" "(binary-search (list 1 2 3 4 5) 5)" "(binary-search (list 1 2 3 4 5) 4)" "(binary-search (list 1 2 3 4 5) 3)" "(binary-search (list 1 2 3 4 5) 2)" "(binary-search (list 1 2 3 4 5) 1)" "(binary-search (list 1 2 3 4 5) 0)" "(binary-search (list 1 2 3 4 5) 6)" "(binary-search (list 1 2 3 4 5) 5)" "(binary-search (list 1 2 3 4 5) 4)" "(binary-search (list 1 2 3 4 5) 6)" "(binary-search (list 1 2 3 4 5) 3)" "(binary-search (list 1 2 3 4 5) 2)" "(binary-search (list 1 2 3 4 5) 3)" "(binary-search (list 1 2 3 4 5) 4)" "(binary-search (list 1 2 3 4 5) 5)" "(binary-search (list 1 2 3 4 5) 6)" "(binary-search (list 1 2 3 4 5) 3)" "(binary-search (list 1 2 3 4 5) 4)" "(binary-search (list 1 2 3 4 5 6) 4)" "(binary-search (list 1 2 3 4 5) 4)" "(binary-search (list 1 2 3 4 5) 3)" "(binary-search (list 1 2 3 4 5) 1)" "(binary-search (list 1 2 3 4 5) 4)" "(binary-search (list 1 2 3 4 5) 5)" "(binary-search (list 1 2 3 4 5) 6)" "(binary-search (list 1 2 3 4 5) 3)" "(binary-search (list 1 2 3 4 5) 2)" "(binary-search (list 1 2 3 4 5) 4)" "(binary-search (list 1 2 3 4 5) 3)" "(binary-search (list 1 2 3 4 5) 2)" "(binary-search (list 1 2 3 4 5) 4)" "(binary-search (list 1 2 3 4 5) 2)" "(binary-search (list 1 2 3 4 5) 3)" "(binary-search (list 1 2 3 4 5) 2)" "(binary-search (list 1 2 3 4 5) 3)" "(binary-search (list 1 2 3 4 5) 2)" "(binary-search (list 1 2 3 4 5) 1)" "(binary-search (list 1 2 3 4 5) 4)" "(binary-search (list 1 2 3 4 5) 5)" "(binary-search (list 1 2 3 4 5) 6)" "(binary-search (list 1 2 3 4 5) 0)" "(binary-search (list 1 2 3 4 5) 6)" "(binary-search (list 1 2 3 4 5) 5)" "(binary-search (list 1 2 3 4 5) 1)" "(run-tests)" "(simple-search (range 0 20) 1)" "(simple-search (range 0 20) 0)" "(simple-search (range 0 20) -1)" "(simple-search (range 0 20) -21)" "(simple-search (range 0 20) 20)" "(simple-search (range 0 20) 21)" "(simple-search (range 0 20) 17)" "(run-all-tests)" "(run-tests)" "(println (range 5))" "(println (range 1 5))" "(println (range 1 6))" "(for [x (range 6)] (println x))" "(run-tests)" "(run-tests grokking-algorithms.binary-search-test)" "(run-tests \\"grokking-algorithms.binary-search-test\\")" "(for [i (range 6)] (println i))" "(for [x (range 6)] (println x))" "(tt 1)" "(run-tests)" "(found-in-range)" "(tt)" "(tt 1\\n    )" "(found-in-range)" "(tt 1)" "(run-tests)" "(tt)" "(found-in-range)" "(run-tests)" "(def *test-data* [0 1 2 3 4 5])" "(deftest foo\\r\\n        (doseq [x *test-data*]\\r\\n           (is (< x 4))))" "(foo)" "(run-tests)" "(for [x (range 6)] (println x))" "(doseq [x (range 6)] (println x))" "(quick-bench (simple-search (range 100) 50))" "(quick-bench (binary-search (range 100) 50))" "(let [x 10000]\\r\\n(report-result (quick-bench (simple-search (range x) 1))))" "(let [x 10000]\\r\\n(quick-bench (simple-search (range x) 1)))" "(let [x 10000]\\r\\n(quick-bench (simple-search (range x) 10000)))" "(simple-search (range 1000) 1)" "(simple-search (range 1000) 1000)" "(simple-search (range 10000) 1000)" "(simple-search (range 10000) 10000)" "(simple-search (range 5001) 5000)" "(simple-search (range 501) 500)" "(simple-search (range 501) 5)" "(simple-search (range 5) 3)" "(simple-search (range 501) 5)" "(simple-search (range 10001) 10000)" "(simple-search (range 10000) 9999)" "(simple-search (range 5) 5)" "(simple-search (range 5) 4)" "(simple-search (range 5) 3)" "(simple-search (range 5) 4)" "(simple-search (range 5) 5)" "(simple-search (range 10001) 10000)" "(let [x 10000]\\r\\n  (do\\r\\n(quick-bench (simple-search (range x) 0))\\r\\n(quick-bench (simple-search (range x) (/ x 2)))\\r\\n(quick-bench (simple-search (range x) x))))" "(simple-search (range 5) 5)" "(simple-search (range 5) 4\\n               )" "(let [x 500]\\r\\n  (quick-bench\\r\\n  (do\\r\\n(simple-search (range x) 0)\\r\\n(simple-search (range x) (/ x 2))\\r\\n(simple-search (range x) x))))" "(let [x 500]\\r\\n  (do\\r\\n(quick-bench (simple-search (range x) 0))\\r\\n(quick-bench (simple-search (range x) (/ x 2)))\\r\\n(quick-bench (simple-search (range x) x))))" "(quick-bench (simple-search (range 1000) 0))" "(quick-bench (binary-search (range 1000) 0))" "(quick-bench (simple-search (range 10000) 9999))" "(use 'criterium.core)" "(quick-bench (simple-search (range 1000) 999)) ;" "(quick-bench (binary-search (range 1000) 999))"]
eclipse.preferences.version=1
